import random
import time



dimensions = 30

class GameArea:
    def __init__(self):
        self.defaultValue = 1
        self.occupiedValue = 0
        self.gArea = [[self.defaultValue] * (dimensions + 1) for i in range(dimensions + 1)] 

    def printArea(self):
        for i in range(len(self.gArea)):
            print(self.gArea[i])
        print("\n\n\n\n\n\n\n\n\n\n")
    
    def clearArea(self):
        self.gArea = [[self.defaultValue] * (dimensions + 1) for i in range(dimensions + 1)] 

    def updateArea(self, pos):
        self.gArea[pos[1]][pos[0]] = self.occupiedValue

g = GameArea()

class Walker:
    def __init__(self):
        self.x = 0
        self.y = 0
        self.DNA = [[random.randint(-1,1), random.randint(-1,1)] * 1 for i in range(dimensions*3)]#one move = [x, y]. 0 or 1 for each
        self.fitness = 0

    def walk(self):
        for i in range(len(self.DNA)): #walk through
            self.x += self.DNA[i][0]
            self.y += self.DNA[i][1]
            #g.updateArea([self.x, self.y])
            if (self.x > dimensions or self.x < 0 or self.y > dimensions or self.y < 0): #if it moves outside of borders set fitness high to get it out of gene pool
               
                self.fitness = dimensions*3
                self.x = 0
                self.y = 0
                break
            
            else:
                self.fitness = (dimensions - self.x) + (dimensions - self.y)
        #g.printArea()
        #time.sleep(.2)
        #g.clearArea()
        





def genChildren(adults, n): #array of adults as well as the number of children needed
    pA = 0
    pb = 0
    children = [0 for i in range(n)]
    
    for i in range(len(adults)):
        pA = adults[i]
        pB = adults[random.randint(0, (len(adults)) - 1)] #random spouse
        midpoint = random.randint(0, len(pA.DNA))#random switching point

        children[i] = Walker()

        for j in range(len(pA.DNA)):
            if (j < midpoint):
                children[i].DNA[j] = pA.DNA[j] #parent a DNA for first half
            if (i > midpoint):
                children[i].DNA[j] = pB.DNA[j] #parent b DNA for second half
    for l in range(n - len(adults)):
        children[len(adults) + l] = Walker()
    return children


def genPop(population):
    popArray = [0 for i in range(population)]

    for i in range(population):
        popArray[i] = Walker()
    return popArray

def runSim():
    popul = 100
    w = genPop(popul)
    its = 0
    
    running = True
    bestfit = dimensions * 3
    baseline = dimensions * 3
    while (running == True):
        matingPool = []

        avgx = 0
        avgy = 0
        bs = 0

        for j in range(len(w)):
            ox = 0
            oy = 0
            
            w[j].walk()
            

            if (w[j].fitness < bestfit):
                bestfit = w[j].fitness
                #print("Generation:>" + str(its) + "Member:>" + str(j) +"\nBest Fit" + str(bestfit))
                g.updateArea([w[j].x, w[j].y])
                bs += 1
            if w[j].fitness == 0:
                g.clearArea()
                print("Generation:>" + str(its) + "Member:>" + str(j) +"\nBest DNA" + str(w[j].DNA))
                for r in range(len(w[j].DNA)):
                    ox += w[j].DNA[r][0]
                    oy += w[j].DNA[r][1]
                   
                    g.updateArea([ox, oy])
                g.printArea()
                g.clearArea()
                running = False
            
            if (w[j].fitness < baseline - 5):
                matingPool.append(w[j])
        if (bs > 0):
                #print("Avgx:>" + str(avgx/bs) + "avgy:>" + str(avgy/bs))
                
                g.printArea()
        if (its % 100 == 0):
            print("its:>" + str(its))
            print("bestFit:>" + str(bestfit))
            g.printArea()
            
            #g.clearArea()
        w = genChildren(matingPool, popul)
        baseline -= .001
        its += 1
        
        
runSim()
